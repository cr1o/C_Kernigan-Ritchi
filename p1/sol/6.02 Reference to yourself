/*
 * main.c
 *
 *  Created on: 22 декабря. 2021 г.
 *      Author: ashirobokov
 */

//6.5 Структуры со ссылками на себя

//Упражнение 6.2. Напишите программу, которая читает текст Си-программы и печатает в алфавитном порядке
//все группы имен переменных, в которых совпадают первые 6 символов, но последующие в чем-то
//различаются. Не обрабатывайте внутренности закавыченных строк и комментариев. Число 6 сделайте
//параметром, задаваемым в командной строке.


struct tnode { /* узел дерева */
	char *word; /* указатель на текст */
	int count; /* число вхождений */
	struct tnode *left; /* левый сын */
	struct tnode *right; /* правый сын */
};

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define MAXWORD 100
#define NSYM 6

struct tnode *addtree(struct tnode *, char *);
void treeprint(struct tnode *);
int getword(char *, int);

struct tnode *talloc(void);
char *strdup2(char *);

int strcmpm(char *, char *, int);
int nsym = NSYM;

//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */

/* подсчет частоты встречаемости слов */
int main(int argc, char* argv[]) {
	int t;

	if (argc > 1){
		argv++;
		if ((*argv)[0] == '-'){
			if ( (t = atoi(*argv)) < 0)
				nsym = -t;
			else {
				nsym = NSYM;
				printf("Incorrect argument\n");
			}
		} else {
			printf("Incorrect argument too\n");
			nsym = NSYM;
		}
	}
	printf("nsym = %d\n", nsym );

	struct tnode *root;
	char word[MAXWORD];
	root = NULL;

	while (getword (word, MAXWORD) != EOF)
		if (isalpha(word[0]))
			root = addtree(root, word);

	treeprint(root);

	getchar();
	return 0;
}

int strcmpm(char *s1, char *s2, int num){

	while ( num--   ){
		if ( (*s1 > *s2) || (*s2 == '\0') )
			return 1;
		else if ( (*s1 < *s2) || (*s1 == '\0') )
			return -1;
		s1++;
		s2++;
	}


	return 0;
}

/* addtree: добавляет узел со словом w в р или ниже него */
struct tnode *addtree(struct tnode *p, char *w){
	int cond;
	if (p == NULL) { /* слово встречается впервые */
		p = talloc(); /* создается новый узел */
		p->word = strdup2(w);
		p->count = 1;
		p->left = p->right = NULL;
	} else if ((cond = strcmpm(w, p->word, nsym)) == 0)
		p->count++; /* это слово уже встречалось */
	else if (cond < 0) /* меньше корня левого поддерева */
		p->left = addtree(p->left, w);
	else /* больше корня правого поддерева */
		p->right = addtree(p->right, w);
	return p;
}

/* treeprint: упорядоченная печать дерева р */
void treeprint(struct tnode *p) {
	if (p != NULL)  {
		treeprint(p->left);
		printf("%4d %s\n", p->count, p->word);
		treeprint(p->right);
	}
}

/* talloc: создает tnode */
struct tnode *talloc(void){
	return (struct tnode *) malloc(sizeof(struct tnode));
}

/* делает дубликат s */
char *strdup2(char *s){
	char *p;
	p = (char *) malloc(strlen(s)+1); /* +1 для '\0' */
	if (p != NULL)
		strcpy(p, s);
	return p;
}

/* getword: принимает следующее слово или символ из ввода */
int getword (char *word, int lim) {
    int c, c1, getch(void);
    void ungetch(int);
    char *w = word;
    while (isspace(c = getch()))
        ;

    //Игнорирование однострочных комментариев
	if (c == '/'){
		c1 = getch();
		if (c1 == '/'){
			while ((c = getch()) != '\n'  )
				;
		} else
			ungetch(c1);
	}

	//Игнорирование комментариев /*...*/
	if (c == '/'){
		c1 = getch();
		if (c1 == '*'){
			c = getch();
			c1 = getch();
			while (c != '*' && c1 != '/'){
				c = c1;
				c1 = getch();
			}
		} else
			ungetch(c1);
	}

    if (c != EOF)
        *w++ = c;
    if (!isalpha(c)) {
        *w = '\0';
        return c;
    }
    for ( ; --lim > 0; w++)
        if (!isalnum(*w = getch())) {
            ungetch(*w);
            break;
        }
    *w = '\0';
    return word[0];
}

int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
		printf ("ungetch: too many characters\n");
	else
		buf[bufp++] = c;
}
