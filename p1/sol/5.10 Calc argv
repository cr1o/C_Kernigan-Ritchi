
/*
 * main.c
 *
 *  Created on: 20 декабря. 2021 г.
 *      Author: ashirobokov
 */
/* 5.10. Аргументы командной строки */

//Упражнение 5.11

//main
#include <stdio.h>
#include <stdlib.h> 	// для atof()
#define MAXOP 100 		// макс. размер операнда или оператора
#define NUMBER '0' 		// признак числа
int getop (char []);
void push (double);
double pop (void);

//pop - push
#define MAXVAL 100 		// максимальная глубина стека
int sp = 0; 			// следующая свободная позиция в стеке */
double val[ MAXVAL ]; 	// стек

//getop
#include <ctype.h>
int getch(void);
void ungetch(int);

//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */


// калькулятор с обратной польской записью
int main (int argc, char *argv[])
{
	int type;
	//double t1,t2,t3;
	double op2, op1;
	char s[MAXOP];

	int a, b, c;
	a = 1;
	b = 2;
	c = 3;

	//while ((type = getop (s)) != EOF) {
	while(--argc){
		type = getop(*++argv);
		//printf("*argv = %s\n", *argv );
		//printf("ret = %c\n\n", type );
		//s = *argv; ?? Почему нельзя

		switch (type) {
		case NUMBER:
			push (atof (*argv));
			break;
		case 'a':
			push ((float) a);
			break;
		case 'b':
			push ((float) b);
			break;
		case 'c':
			push ((float) c);
			break;
		case '+':
			push (pop() + pop());
			break;
		case '*':
			push (pop() * pop());
			break;
		case '-':
			op2 = pop();
			push (pop() - op2);
			break;
		case '%':
			op2 = pop();
			op1 = pop();
			while (op1 > op2)
				op1 -= op2;
			push (op1);
			break;
		case '/' :
			op2 = pop();
			if (op2 != 0.0)
				push (pop() / op2);
			else
				printf("Error: division by zero\n");
			break;
		case '\n' :
			printf("\t%.8g\n", pop());
			break;
		default:
			printf("Error: Unknown operation %s\n", s);
		break;
		}
	}

	printf("\t%.8g\n", pop());
	getchar();
	return 0;
}

/* getop: получает следующий оператор или операнд */
int getop(char s[])
{
	int c1, c = s[0];
	if (c == 'x')
		return '*';
	if ((c == '/') || (c == '+'))
		return c;

	if (c == '-') {
		c1 = s[1];
		if (isdigit(c1))
			return NUMBER;
		else
			return c;
	}
	return NUMBER;
}
///*
int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
		printf ("ungetch: too many characters\n");
	else
		buf[bufp++] = c;
}
//*/

/* push: положить значение f в стек */
void push(double f)
{
	if (sp < MAXVAL)
		val[sp++] = f;
	else
		printf( "Error: Stack full, %g does not fit\n", f);
}
/* pop: взять с вершины стека и выдать в качестве результата */
double pop(void)
{
	if (sp > 0)
		return val[--sp];
	else {
		printf( "Error: stack is empty\n");
		return 0.0;
	}
}
