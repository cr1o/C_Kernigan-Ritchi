/*
 * main.c
 *
 *  Created on: 17 декабря. 2021 г.
 *      Author: ashirobokov
 */
/* 4.3. Внешние переменные */

//Упражнение 4.6. Введите команды для работы с переменными (легко обеспечить до 26 переменных, каждая
//из которых имеет имя, представленное одной буквой латинского алфавита). Добавьте переменную,
//предназначенную для хранения самого последнего из напечатанных значений. 


//main
#include <stdio.h>
#include <stdlib.h> 	// для atof()
#define MAXOP 100 		// макс. размер операнда или оператора
#define NUMBER '0' 		// признак числа
int getop (char []);
void push (double);
double pop (void);

//pop - push
#define MAXVAL 100 		// максимальная глубина стека
int sp = 0; 			// следующая свободная позиция в стеке */
double val[ MAXVAL ]; 	// стек

//getop
#include <ctype.h>
int getch(void);
void ungetch(int);

//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */


// калькулятор с обратной польской записью
int main ()
{
	int type;
	//double t1,t2,t3;
	double op2, op1;
	char s[MAXOP];

	int a, b, c;
	a = 1;
	b = 2;
	c = 3;

	while ((type = getop (s)) != EOF) {
		//printf("String =  %s\n", s);
		//printf("Type =  %d\n", type);
		switch (type) {
		case NUMBER:
			push (atof (s));
			break;
		case 'a':
			push ((float) a);
			break;
		case 'b':
			push ((float) b);
			break;
		case 'c':
			push ((float) c);
			break;
		case '+':
			push (pop() + pop());
			break;
		case '*':
			push (pop() * pop());
			break;
		case '-':
			op2 = pop();
			push (pop() - op2);
			break;
		case '%':
			op2 = pop();
			op1 = pop();
			while (op1 > op2)
				op1 -= op2;
			push (op1);
			break;
		case '/' :
			op2 = pop();
			if (op2 != 0.0)
				push (pop() / op2);
			else
				printf("Error: division by zero\n");
			break;
		case '\n' :
			printf("\t%.8g\n", pop());
			break;
		default:
			printf("Error: Unknown operation %s\n", s);
		break;
		}
	}
	return 0;
}

/* getop: получает следующий оператор или операнд */
int getop(char s[])
{
	int i, c;
	int tm;
	int isNumber;

	while ((s[0] = c = getch()) == ' ' || c == '\t' )
		;

	isNumber = 0;
	if (c == '-'){
		tm = getch();
		if (tm == '.' || isdigit(tm) )
			isNumber = 1;
		ungetch(tm);
	}

	s[1] = '\0';
	if (!isdigit(c) && c != '.' &&  !isNumber   )
		return c; /* не число */

	i = 0;
	if ( c == '-'){
		//s[++i] = c;
		//printf("c =  %c\n", c);
		c = getch();
		//printf("c =  %c\n", c);
		s[++i] = c;
	}
	if (isdigit(c)) /* накапливаем целую часть */
		while (isdigit(s[++i] = c = getch()))
			;
	if (c == '.') /* накапливаем дробную часть */
		while (isdigit(s[++i] = c = getch()))
			;
	s[i] = '\0';
	if (c != EOF)
		ungetch(c);
	return NUMBER;
}
///*
int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
		printf ("ungetch: too many characters\n");
	else
		buf[bufp++] = c;
}
//*/

/* push: положить значение f в стек */
void push(double f)
{
	if (sp < MAXVAL)
		val[sp++] = f;
	else
		printf( "Error: Stack full, %g does not fit\n", f);
}
/* pop: взять с вершины стека и выдать в качестве результата */
double pop(void)
{
	if (sp > 0)
		return val[--sp];
	else {
		printf( "Error: stack is empty\n");
		return 0.0;
	}
}
