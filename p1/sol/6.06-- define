//06.01.2021

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct nlist {          // элемент таблицы 
    struct nlist *next; // указатель на следующий элемент 
    char *name;         // определенное имя 
    char *defn;         // замещающий текст 
};

#define HASHSIZE 101
#define MAXWORD 100
static struct nlist *hashtab[HASHSIZE]; // таблица указателей 

struct nlist *lookup(char *);
//char *strdup(char *);

unsigned hash(char *s);
struct nlist *lookup(char *s);
struct nlist *install(char *name, char *defn);
void tableprint(void);
void undef(char *s);

//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */
int getword(char *, int);

int main(){
    char word[MAXWORD], name[MAXWORD];
    struct nlist *np;
    
    while (getword (word, MAXWORD) != EOF){
        if (strcmp(word, "#") == 0) {
            getword (word, MAXWORD);
            if (strcmp(word, "define") == 0) {
                printf("<def>");
                getword (word, MAXWORD);
                printf("<NAME>");
                strcpy(name, word);
                getword (word, MAXWORD);
                np = install(name, word);
            } else if (strcmp(word, "undef") == 0) {
                printf("<undef>");
                if (isupper(getword (word, MAXWORD))) {
                    printf("<NAME>");
                    undef(word);
                }
            }
        } else if ((np = lookup(word)) != NULL) {
            printf("<in table>");
            strcpy(word, np->defn); 
        }
        printf("[%s]", word);
    }
    printf("\n\n");

    //printf("[%s]", word);
    tableprint();
    getchar();
    return 0;
}


/* hash: получает хэш-код для строки s */
unsigned hash(char *s){
    unsigned hashval;
    for (hashval = 0; *s != '\0'; s++)
        hashval = *s + 31 * hashval;
    return hashval % HASHSIZE;
}

/* lookup: ищет s */
struct nlist *lookup(char *s){
    struct nlist *np;
    for (np = hashtab[hash(s)]; np != NULL; np = np->next){
        
        printf("\n-------IN lookup-----\n");
        printf ("Adress np = %d\n", np);
        printf ("Adress np->next = %d\n", np->next);
        printf("\n-------OUT lookup-----\n");
        if (strcmp(s, np->name) == 0)
            return np; /* нашли */
    }
        
    return NULL; /* не нашли */
}

/* install: заносит имя и текст (name, defn) в таблицу */
struct nlist *install(char *name, char *defn){
    struct nlist *np;
    unsigned hashval;
    
    printf("\n-------IN install-----\n");
    printf("size of np %d\n", sizeof(*np));

    if ((np = lookup(name)) == NULL) { /* не найден */
        np = (struct nlist *) malloc(sizeof(*np));
        printf ("Adress np = %d\n", np);
        if (np == NULL || (np->name = strdup(name)) == NULL)
            return NULL;
        hashval = hash(name);
        printf ("Hashval = %d\n", hashval);
        np->next = hashtab[hashval];
        printf ("Adress np->next = %d\n", np->next);

        hashtab[hashval] = np;
    } else /* уже имеется */
        free((void *) np->defn); /* освобождаем прежний defn */
    if ((np->defn = strdup(defn)) == NULL)
        return NULL;

    printf("\n-------OUT install-----\n");

    return np;
}

/* getword: принимает следующее слово или символ из ввода */
int getword (char *word, int lim) {
    int c, getch(void);
    void ungetch(int);
    char *w = word;
    while (isspace(c = getch()))
        ;
    if (c != EOF)
        *w++ = c;
    if (!isalpha(c)) {
        *w = '\0';
        return c;
    }
    for ( ; --lim > 0; w++)
        if (!isalnum(*w = getch())) {
            ungetch(*w);
            break;
        }
    *w = '\0';
    return word[0];
}

int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
		printf ("ungetch: too many characters\n");
	else
		buf[bufp++] = c;
}

void tableprint(void){
    int i;
    struct nlist *np;

    for (i=0; i < HASHSIZE; i++)
        for (np = hashtab[i]; np != NULL; np = np->next)
            printf("name=%s, defn=%s\n", np->name, np->defn);
 }
 
void undef(char *s){
    int i;
    struct nlist *np, *prev;

    prev = NULL;
    i = hash(s);
    for (np = hashtab[i]; np != NULL; np = np->next) {
        if (strcmp(s, np->name) == 0)
            break;
        prev = np;
    }
    if (np != NULL) {
        if (prev == NULL)
            hashtab[i] = np->next;
        else
            prev->next = np->next;
        free((void *) np->name);
        free((void *) np->defn);
        free((void *) np);
    }
}
