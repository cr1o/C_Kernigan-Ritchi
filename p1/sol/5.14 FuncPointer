//09.01.2022
//Упражнение 5.14. Модифицируйте программу сортировки, чтобы она реагировала на параметр -r,
//указывающий, что объекты нужно сортировать в обратном порядке, т. е. в порядке убывания. Обеспечьте,
//чтобы -r работал и вместе с -n.

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAXLINES 5000 /* максимальное число строк */
#define MAXLEN 1000 /* максимальная длина строки */


//alloc
char *alloc(int n);
//void swap(char *v[], int i, int j);
int getline2 (char s[], int lim);
#define ALLOCSIZE 10000 /* размер доступного пространства */
static char allocbuf[ALLOCSIZE]; /* память для alloc */
static char *allocp = allocbuf; /* указатель на своб. место */


char *lineptr[MAXLINES]; /* указатели на строки текста */

int readlines(char *lineptr[], int nlines);
void writelines(char *lineptr[], int nlines, int reverse);
void quicksort(void *lineptr[], int left, int right, int (*comp)(void *, void *));
int numcmp(char *, char *);

/* сортировка строк */
int main(int argc, char *argv[])
{
    int nlines;        /* количество прочитанных строк */
    int numeric = 0;   /* 1, если сорт. по числ. знач. */
    int reverse = 0;   /* 1, если выводить по убыванию */
    int c;

    while (--argc > 0 && (*++argv)[0] == '-')
        while ((c = *++argv[0]))
            switch (c) {
            case 'n':
                numeric = 1;
                break;
            case 'r':
                reverse = 1;
                break;
            default:
                printf("sort: неверный параметр %c\n", c);
                argc = 0;
                break;
            }

    if ((nlines = readlines(lineptr, MAXLINES)) >= 0) {
        quicksort((void **) lineptr, 0, nlines-1, (int (*)(void*,void*))(numeric ? numcmp : strcmp));
        printf("SORTED:\n");
        writelines(lineptr, nlines, reverse);
        getchar();
        return 0;
    } else {
        printf("Bведено слишком много строк\n");
        return 1;
    }
}

/* qsort: сортирует v[left]...v[ right] по возрастанию */
void quicksort(void *v[], int left, int right, int (*comp)(void *, void *)){
    int i, last;
    void swap(void *v[], int, int);
    if (left >= right) /* ничего не делается, если */
        return; /* в массиве менее двух элементов */
    swap(v, left, (left + right )/2);
    last = left;
    for (i = left+1; i <= right; i++)
        if ((*comp)(v[i], v[left]) < 0)
            swap(v, ++last, i);
    swap(v, left, last);
    quicksort(v, left, last-1, comp);
    quicksort(v, last+1, right, comp);
}

/* swap: поменять местами v[i] и v[j] */
void swap(void *v[], int i, int j){
	void *temp;
	temp = v[i];
	v[i] = v[j];
	v[j] = temp;
}

/* numcmp: сравнивает s1 и s2 как числа */
int numcmp(char *s1, char *s2){
	double v1, v2;
	v1 = atof(s1);
	v2 = atof(s2);
	if (v1 < v2)
		return -1;
	else if (v1 > v2)
		return 1;
	else
		return 0;
}

/* writelines: печать строк */
void writelines(char *lineptr[], int nlines, int reverse){
    int i;

    if (reverse)
        for (i=1; i <= nlines; i++)
            printf("%s\n", lineptr[nlines-i]);
    else
        while (nlines-- > 0)
            printf("%s\n", *lineptr++);
}

/* readlines: чтение строк */
int readlines(char *lineptr[], int maxlines)
{
    int len, nlines;
    char *p, line[MAXLEN];
    nlines = 0;
    while ((len = getline2(line, MAXLEN)) > 0)
        if (nlines >= maxlines || (p = alloc(len)) == NULL)
            return -1;
        else {
            line[len-1] = '\0'; /* убираем символ \n */
            strcpy(p, line);
            lineptr[nlines++] = p;
        }
    return nlines;
}

/* getline: считывает строку в s, возвращает её длину */
int getline2 (char s[], int lim)
{
    int c, i;

    for (i = 0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
        s[i] = c;
    if (c == '\n') {
        s[i] = c;
        ++i;
    }
    s[i] = '\0';
    return i;
}

char *alloc(int n) /* возвращает указатель на п символов */
{
	if (allocbuf + ALLOCSIZE - allocp >= n) {
		allocp += n; /* пространство есть */
		return allocp - n; /* старое р */
	} else /* пространства нет */
		return 0;
}
