/*
 * main.c
 *
 *  Created on: 21 декабря. 2021 г.
 *      Author: ashirobokov
 */

//6.3 Массивы структур
//Упражнение 6.1. Наша версия getword не обрабатывает должным образом знак подчеркивания, строковые
//константы, комментарии и управляющие строки препроцессора. Напишите более совершенный вариант
//программы.

struct key {
	char *word;
	int count;
} keytab[] = {
		{"_asm", 0},
		{"auto", 0},
		{"break", 0},
		{"case", 0},
		{"char", 0},
		{"const", 0},
		{"continue", 0},
		{"default", 0},
		/*...*/
		{"unsigned", 0},
		{"void", 0},
		{"volatile", 0},
		{"while", 0}
    };

#define NKEYS (sizeof keytab / sizeof keytab[0])

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#define MAXWORD 100
int getword(char *, int);
int binsearch(char *, struct key *, int);


//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */

/* подсчет ключевых слов Си */
int main(){
    int n;
    char word[MAXWORD];
    while(getword(word, MAXWORD) != EOF)
        if (isalpha(word[0]) || word[0] == '_')
            if ((n = binsearch(word, keytab, NKEYS)) >= 0)
                keytab[n].count++;

    for (n = 0; n < NKEYS; n++)
        if (keytab[n].count > 0)
            printf("%4d %s\n", keytab[n].count, keytab[n].word);

    getchar();
    return 0;
}

/* binsearch: найти слово в tab[0] ... tab[n - Т] */
int binsearch(char *word, struct key tab[], int n){
    int cond;
    int low, high, mid;
    low = 0;
    high = n - 1 ;
    while (low <= high) {
        mid = (low + high)/2;
        if ((cond = strcmp(word, tab[mid].word)) < 0)
            high = mid - 1;
        else if (cond > 0)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}

/* getword: принимает следующее слово или символ из ввода */
int getword (char *word, int lim) {
    int c, c1, getch(void);
    void ungetch(int);
    char *w = word;

    while (isspace(c = getch()))
        ;

    //Игнорирование однострочных комментариев
    if (c == '/'){
    	c1 = getch();
    	if (c1 == '/'){
    		while ((c = getch()) != '\n'  )
    			;
    	} else
    		ungetch(c1);
    }

    //Игнорирование комментариев /*...*/
    if (c == '/'){
		c1 = getch();
		if (c1 == '*'){
			c = getch();
			c1 = getch();
			while (c != '*' && c1 != '/'){
				c = c1;
				c1 = getch();
			}
		} else
			ungetch(c1);
	}

    if (c != EOF)
        *w++ = c;
    if (!isalpha(c) && c != '_'  ) {
        *w = '\0';
        return c;
    }

    for ( ; --lim > 0; w++)
        if (!isalnum(*w = getch())) {
            ungetch(*w);
            break;
        }
    *w = '\0';

    return word[0];
}

int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
	printf ("ungetch: too many characters\n");
	else
	buf[bufp++] = c;
}
