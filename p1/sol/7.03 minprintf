//25.12.2021
//7.3. Списки аргументов переменной длины
//Упражнение 7.3. Дополните minprintf другими возможностями printf.


#include <stdio.h>
#include <stdarg.h>

void minprintf(char *fmt, ...);

int main(){
    int a, b, c;
    a = 5;
    b = 8;
    c = 26;
    
    minprintf("test func %d\n", c);
    minprintf("test func %c\n", c);
    minprintf("test func %x\n", c);
    minprintf("test func %X\n", c);
    minprintf("test func %o\n", c);
    minprintf("\n\n");

    return 0;
}

/* minprintf: минимальный printf с переменным числом аргумент */
void minprintf(char *fmt, ...) {
    va_list ap; /* указывает на очередной безымянный аргумент */
    char *p, *sval;
    int ival;
    double dval;
    va_start(ap, fmt); /* устанавливает ар на 1-й безымянный аргумент */
    
    for (p = fmt; *p; p++) {
        if (*p != '%') {
            putchar(*p);
            continue;
        }

        switch (*++p) {
        case 'd':
            ival = va_arg(ap, int);
            printf ("%d", ival);
            break;
        case 'f':
            dval = va_arg(ap, double);
            printf("%f", dval);
            break;
        case 'c':
            dval = va_arg(ap, double);
            printf("%c", dval);
            break;
        case 'x':
            dval = va_arg(ap, double);
            printf("%x", dval);
            break;
        case 'X':
            dval = va_arg(ap, double);
            printf("%X", dval);
            break;
        case 'o':
            dval = va_arg(ap, double);
            printf("%o", dval);
            break; 

        case 's':
            for (sval = va_arg(ap, char *); *sval; sval++)
                putchar(*sval);
            break;
        default:
            putchar(*p);
            break;
        }
    }
    va_end(ap); /* очистка, когда все сделано */
}
