
struct tnode { /* узел дерева */
	char *word; /* указатель на текст */
	int count; /* число вхождений */
	struct tnode *left; /* левый сын */
	struct tnode *right; /* правый сын */
};

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define MAXWORD 100
struct tnode *addtree(struct tnode *, char *);
void treeprint(struct tnode *);
int getword(char *, int);

struct tnode *talloc(void);
char *strdup2(char *);


//getch и ungetch
#define BUFSIZE 100
char buf[BUFSIZE]; /* буфер для ungetch */
int bufp = 0; /* след, свободная позиция в буфере */

/* подсчет частоты встречаемости слов */
int main() {
	struct tnode *root;
	char word[MAXWORD];
	root = NULL;
	while (getword (word, MAXWORD) != EOF)
	if (isalpha(word[0]))
	root = addtree(root, word);
	treeprint(root);
	return 0;
}

/* addtree: добавляет узел со словом w в р или ниже него */
struct tnode *addtree(struct tnode *p, char *w){
	int cond;
	if (p == NULL) { /* слово встречается впервые */
	p = talloc(); /* создается новый узел */
	p->word = strdup2(w);
	p->count = 1;
	p->left = p->right = NULL;
	} else if ((cond = strcmp(w, p->word)) == 0)
	p->count++; /* это слово уже встречалось */
	else if (cond < 0) /* меньше корня левого поддерева */
	p->left = addtree(p->left, w);
	else /* больше корня правого поддерева */
	p->right = addtree(p->right, w);
	return p;
}

/* treeprint: упорядоченная печать дерева р */
void treeprint(struct tnode *p) {
	if (p != NULL)  {
	treeprint(p->left);
	printf("%4d %s\n", p->count, p->word);
	treeprint(p->right);
	}
}

/* talloc: создает tnode */
struct tnode *talloc(void){
	return (struct tnode *) malloc(sizeof(struct tnode));
}

/* делает дубликат s */
char *strdup2(char *s){
	char *p;
	p = (char *) malloc(strlen(s)+1); /* +1 для '\0' */
	if (p != NULL)
	strcpy(p, s);
	return p;
}

/* getword: принимает следующее слово или символ из ввода */
int getword (char *word, int lim) {
    int c, getch(void);
    void ungetch(int);
    char *w = word;
    while (isspace(c = getch()))
        ;
    if (c != EOF)
        *w++ = c;
    if (!isalpha(c)) {
        *w = '\0';
        return c;
    }
    for ( ; --lim > 0; w++)
        if (!isalnum(*w = getch())) {
            ungetch(*w);
            break;
        }
    *w = '\0';
    return word[0];
}

int getch(void) // взять (возможно возвращенный) символ
{
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) // вернуть символ на ввод
{
	if (bufp >= BUFSIZE)
	printf ("ungetch: too many characters\n");
	else
	buf[bufp++] = c;
}
